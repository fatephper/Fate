debug_backtrace() 函数生成一个backtrace

该函数返回一个关联数组。下面是可能返回的元素：

名称 类型 描述 
function 字符串 当前的函数名。 
line 整数 当前的行号。 
file 字符串 当前的文件名。 
class 字符串 当前的类名 
object 对象 当前对象。 
type 字符串 当前的调用类型，可能的调用： 
?返回: "->"  - 方法调用
?返回: "::"  - 静态方法调用
?返回 nothing - 函数调用
 
args 数组 如果在函数中，列出函数参数。如果在被引用的文件中，列出被引用的文件名。 
<?php
function one($str1, $str2)
 {
 two("Glenn", "Quagmire");
 }
function two($str1, $str2)
 {
 three("Cleveland", "Brown");
 }
function three($str1, $str2)
 {
 print_r(debug_backtrace());
 }

one("Peter", "Griffin");
?>输出：

Array
(
[0] => Array 
 (
 [file] => C:\webfolder\test.php
 [line] => 7
 [function] => three
 [args] => Array
  (
  [0] => Cleveland
  [1] => Brown 
  ) 
 )
[1] => Array
 (
 [file] => C:\webfolder\test.php
 [line] => 3
 [function] => two
 [args] => Array
  (
  [0] => Glenn
  [1] => Quagmire
  )
 ) 
[2] => Array
 (
 [file] => C:\webfolder\test.php
 [line] => 14
 [function] => one
 [args] => Array
  (
  [0] => Peter
  [1] => Griffin
  )
 )
)

debug_print_backtrace() 函数输出 backtrace。

<?php
function one($str1, $str2)
 {
 two("Glenn", "Quagmire");
 }
function two($str1, $str2)
 {
 three("Cleveland", "Brown");
 }
function three($str1, $str2)
 {
 debug_print_backtrace();
 }

one("Peter", "Griffin");
?>

输出：

#0 three(Cleveland, Brown) called at [C:\webfolder\test.php:8]
#1 two(Glenn, Quagmire) called at [C:\webfolder\test.php:4]
#2 one(Peter, Griffin) called at [C:\webfolder\test.php:15]


error_get_last() 函数获取最后发生的错误。

该函数以数组的形式返回最后发生的错误。

返回的数组包含 4 个键和值：

?[type] - 错误类型
?[message] - 错误消息
?[file] - 发生错误所在的文件
?[line] - 发生错误所在的行
语法
error_get_last()例子
<?php
echo $test;
print_r(error_get_last());
?>输出：

Array
( 
[type] => 8
[message] => Undefined variable: test
[file] => C:\webfolder\test.php
[line] => 2
)

error_log() 函数向服务器错误记录、文件或远程目标发送一个错误。

若成功，返回 true，否则返回 false。

语法
error_log(error,type,destination,headers)参数 描述 
error 必需。要记录的错误消息。 
type 可选。规定错误记录的类型。

可能的记录类型：

?0 - 默认。根据在 php.ini 文件中的 error_log 配置，错误被发送到服务器日志系统或文件。
?1 - 错误被发送到 destination 参数中的地址。只有该类型使用 headers 参数。
?2 - 通过 PHP debugging 连接来发送错误。该选项只在 PHP 3 中可用。
?3 - 错误发送到文件目标字符串。
 
destination 可选。规定向何处发送错误消息。该参数的值依赖于 "type" 参数的值。 
headers 可选。只在 "type" 为 1 时使用。

规定附加的头部，比如 From, Cc 以及 Bcc。由 CRLF (\r\n) 分隔。

注释：在发送电子邮件时，必须包含 From 头部。可以在 php.ini 文件中或者通过此参数设置。

//禁用错误报告
error_reporting(0);

//报告运行时错误
error_reporting(E_ERROR | E_WARNING | E_PARSE);

//报告所有错误
error_reporting(E_ALL);

 
restore_error_handler() 恢复之前的错误处理程序。 4 
restore_exception_handler() 恢复之前的异常处理程序。 

set_error_handler(error_function,error_types)参数 描述 
error_function 必需。规定发生错误时运行的函数。 
error_types 可选。规定在哪个错误报告级别会显示用户定义的错误。默认是 "E_ALL"。 

定义和用法
set_exception_handler() 函数设置用户自定义的异常处理函数。

该函数用于创建运行时期间的用户自己的异常处理方法。

该函数会返回旧的异常处理程序，若失败，则返回 null。

语法
set_exception_handler(exception_function)参数 描述 
error_function 必需。规定未捕获的异常发生时调用的函数。

该函数必须在调用 set_exception_handler() 函数之前定义。

这个异常处理函数需要需要一个参数，即抛出的 exception 对象。
 
提示和注释
提示：在这个异常处理程序被调用后，脚本会停止执行。
例子
<?php
function myException($exception)
{
echo "<b>Exception:</b> " , $exception->getMessage();
}

set_exception_handler('myException');

throw new Exception('Uncaught Exception occurred');
?>
